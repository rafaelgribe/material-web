//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//

// go/keep-sorted start
@use 'sass:list';
@use 'sass:map';
// go/keep-sorted end
// go/keep-sorted start
@use '../../tokens';
// go/keep-sorted end

@mixin theme($tokens) {
  $supported-tokens: list.join(
    tokens.$md-comp-dialog-supported-tokens,
    (
      'container-shape-start-start',
      'container-shape-start-end',
      'container-shape-end-end',
      'container-shape-end-start'
    )
  );

  @each $token, $value in $tokens {
    @if list.index($supported-tokens, $token) == null {
      @error 'Token `#{$token}` is not a supported token.';
    }

    @if $value {
      --md-dialog-#{$token}: #{$value};
    }
  }
}

@mixin styles() {
  $tokens: tokens.md-comp-dialog-values();
  $md-sys-color: tokens.md-sys-color-values-light();
  $md-sys-motion: tokens.md-sys-motion-values();

  :host {
    @each $token, $value in $tokens {
      --_#{$token}: var(--md-dialog-#{$token}, #{$value});
    }

    // Support logical shape properties
    --_container-shape-start-start: var(
      --md-dialog-container-shape-start-start,
      var(--_container-shape)
    );
    --_container-shape-start-end: var(
      --md-dialog-container-shape-start-end,
      var(--_container-shape)
    );
    --_container-shape-end-end: var(
      --md-dialog-container-shape-end-end,
      var(--_container-shape)
    );
    --_container-shape-end-start: var(
      --md-dialog-container-shape-end-start,
      var(--_container-shape)
    );

    border-start-start-radius: var(--_container-shape-start-start);
    border-start-end-radius: var(--_container-shape-start-end);
    border-end-end-radius: var(--_container-shape-end-end);
    border-end-start-radius: var(--_container-shape-end-start);
    display: contents;
    margin: auto;
    max-height: min(560px, calc(100% - 48px));
    max-width: min(560px, calc(100% - 48px));
    min-height: 140px;
    min-width: 280px;
    position: fixed;
    height: fit-content;
    width: fit-content;
  }

  dialog {
    background: transparent;
    border: none;
    border-radius: inherit;
    flex-direction: column;
    height: inherit;
    margin: inherit;
    max-height: inherit;
    max-width: inherit;
    min-height: inherit;
    min-width: inherit;
    outline: none;
    overflow: visible;
    padding: 0;
    width: inherit;
  }

  dialog[open] {
    display: flex;
  }

  ::backdrop {
    // Can't use ::backdrop since Firefox does not allow animations on it.
    background: none;
  }

  .scrim {
    background: map.get($md-sys-color, 'scrim');
    display: none;
    inset: 0;
    opacity: 32%;
    pointer-events: none;
    position: fixed;
    z-index: 1;
  }

  :host([open]) .scrim {
    display: flex;
  }

  h2 {
    all: unset;
    align-self: stretch;
    flex-grow: 1;
  }

  .headline {
    align-items: center;
    color: var(--_headline-color);
    display: flex;
    font-family: var(--_headline-font);
    font-size: var(--_headline-size);
    line-height: var(--_headline-line-height);
    font-weight: var(--_headline-weight);
    position: relative;
  }

  slot[name='headline']::slotted(*),
  .close-button-container {
    align-items: center;
    align-self: stretch;
    box-sizing: border-box;
    display: flex;
    gap: 8px;
    justify-content: space-between;
    padding: 32px 32px 0;
  }

  .scrollable slot[name='headline']::slotted(*),
  .scrollable .close-button-container {
    padding-bottom: 16px;
  }

  .scrollable.has-headline slot[name='content']::slotted(*) {
    padding-top: 8px;
  }

  .container {
    border-radius: inherit;
    display: flex;
    flex-direction: column;
    // Safari won't show content with "flex: 1", but container needs to grow if
    // height is set on the dialog, so use flex-grow instead.
    flex-grow: 1;
    overflow: hidden;
    position: relative;
    transform-origin: top;
  }

  .container::before {
    background: var(--_container-color);
    border-radius: inherit;
    content: '';
    inset: 0;
    position: absolute;
  }

  .scroller {
    display: flex;
    flex: 1;
    flex-direction: column;
    overflow: hidden;
    // needed to display scrollbars on Chrome linux. Also needs to be > 0 so
    // that content that is position: fixed in the content can render above the
    // actions bar. e.g. <md-select positioning="menu-fixed">
    z-index: 1;
  }

  .scrollable .scroller {
    // Only add scrollbars if the content is overflowing. This prevents extra
    // space from appearing on platforms that reserve scrollbar space.
    // Note: we only scroll vertically. Horizontal scrolling should be handled
    // by the content.
    overflow-y: scroll;
  }

  .content {
    color: var(--_supporting-text-color);
    font-family: var(--_supporting-text-font);
    font-size: var(--_supporting-text-size);
    line-height: var(--_supporting-text-line-height);
    font-weight: var(--_supporting-text-weight);
    height: min-content; // Needed for Safari
    position: relative;
  }

  slot[name='content']::slotted(*) {
    box-sizing: border-box;
    padding: 32px;
  }

  // Anchors are used with an IntersectionObserver to determine when the content
  // has scrolled.
  .anchor {
    position: absolute;
  }

  .top.anchor {
    top: 0;
  }

  .bottom.anchor {
    bottom: 0;
  }

  .actions {
    position: relative;
    background-color: var(--_action-container-color);
  }

  slot[name='actions']::slotted(*) {
    box-sizing: border-box;
    display: flex;
    gap: 8px;
    justify-content: flex-end;
    padding: 24px 32px;
  }

  @media (forced-colors: active) {
    dialog {
      outline: 2px solid WindowText;
    }
  }
}
